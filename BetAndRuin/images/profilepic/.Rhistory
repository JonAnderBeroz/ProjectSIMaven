z_opt_new == z_opt + dual$duals[1]
1] 1185000
get.constraints(model.example)
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
dual <- get.sensitivity.rhs(model.example)
dual
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
solve(model.example)
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
solve(model.example)
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
dual$duals[1]
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[1]
z_opt_new == z_opt + dual$duals[1]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[1]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[4]
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
#solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[4]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
#solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[4]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
# Shadow price interpretation y4^* related to demand b4
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[4]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
# Shadow price interpretation y4^* related to demand b4
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
dual$duals
dual$dualsfrom
dual$dualstill
dual$duals
max(dual$duals)
which.max(dual$duals)
dual$duals
dual$duals
get.variables(model.example)
get.objective(model.example)
get.objective(model.example)
get.sensitivity.obj(model.example)
get.objective(model.example)
get.variables(model.example)
solve(model.example)
dimnames(model.example) <- list(constraints, variables)
model.example
model.example
model.example <- make.lp(nrow=4, ncol=3)
model.example
set.objfn(lprec=model.example, obj=c(-40, -92.5, -115), indices=1:3)
model.example
set.column(lprec=model.example, column=1, x=c(0.05, 0.1, 0.05, 1))
set.column(lprec=model.example, column=2, x=c(0.05, 0.1, 0.1, 0))
set.column(lprec=model.example, column=3, x=c(0.1, 0.1, 0.1, 0))
model.example
set.objfn(lprec=model.example, obj=c(-40, -92.5, -115), indices=1:3)
model.example
set.constr.value(lprec=model.example, rhs=c(1000, 1800, 1200, 6000), constraints=1:4)
set.constr.type(model.example, types=c("<=", "<=", "<=", ">="), constraints=1:4)
model.example
variables   <- c("x1","x2","x3")
constraints <- c("Constraint 1", "Constraint 2", "Constraint 3", "Constraint 4")
dimnames(model.example) <- list(constraints, variables)
model.example
constraints <- c("Nitrate", "Sulphur", "Potash")
which.max(dual$duals)
constraints(which.max(dual$duals))
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints(which.max(dual$duals))
constraints
constraints(which.max(dual$duals))
constraints[which.max(dual$duals)]
set.rhs(model.example, c(1000, 1800, 1200, 6000))
get.variables(model.example)
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
get.variables(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
# Shadow price interpretation y4^* related to demand b4
set.rhs(model.example, c(1000, 1800, 1200, 6001))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
get.constr.value(side = "rhs", constraints = 1:4)
get.constraints(model.example)
cons <- get.constraints(model.example);
cons
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
cons <- get.constraints(model.example);
cons
cons <- get.constraints(model.example);
cons
cons <- get.constraints(model.example);
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints[which.max(dual$duals)]
set.rhs(model.example, c(1000, 1800, 1200, 6000))
cons <- get.constraints(model.example);
cons
solve(model.example)
constraints[which.max(dual$duals)]
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints[which.max(dual$duals)]
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints[which.max(dual$duals)]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints[which.max(dual$duals)]
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
dual <- get.sensitivity.rhs(model.example)
constraints <- c("Nitrate", "Sulphur", "Potash")
constraints[which.max(dual$duals)]
set.rhs(model.example, c(1000, 1800, 1200, 6000))
cons <- get.constraints(model.example);
constraints[which.max(dual$duals)]
set.rhs(model.example, c(1000, 1800, 1200, 6000))
cons <- get.constraints(model.example);
cons
cons <- get.constraints(model.example);
cons[which.max(dual$duals)]
(cons[highest]+300)<=dual$dualstill[highest])
(cons[highest]+300)<=dual$dualstill[highest]
highest <- which.max(dual$duals)
constraints[highest]
cons <- get.constraints(model.example);
(cons[highest]+300)<=dual$dualstill[highest]
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
get.variables(model.example)
get.objective(model.example)
get.sensitivity.obj(model.example)
set.objfn(model.example, c(100, 92.5, 180), 1:3)
solve(model.example)
get.variables(model.example)
get.objective(model.example)
set.objfn(model.example, c(100, 92.5, 180), 1:3)
solve(model.example)
get.objective(model.example)
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
dual$dualsfrom
dual$dualstill
set.rhs(model.example, 1100, 1)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
get.variables(model.example)
get.objective(model.example)
get.sensitivity.obj(model.example)
set.objfn(model.example, c(100, 92.5, 180), 1:3)
solve(model.example)
set.objfn(model.example, c(40, 92.5, 180), 1:3)
solve(model.example)
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
get.variables(model.example)
get.objective(model.example)
get.sensitivity.obj(model.example)
set.objfn(model.example, c(40, 92.5, 180), 1:3)
solve(model.example)
model.example
model.example
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
solve(model.example)
set.objfn(model.example, c(40, 92.5, 115), 1:3)
solve(model.example)
set.objfn(model.example, c(100, 92.5, 115), 1:3)
solve(model.example)
get.variables(model.example)
get.objective(model.example)
set.objfn(model.example, c(50, 92.5, 115), 1:3)
solve(model.example)
get.variables(model.example)
get.objective(model.example)
get.variables(model.example)
get.objective(model.example)
get.variables(model.example)
set.objfn(model.example, c(60, 92.5, 115), 1:3)
solve(model.example)
set.objfn(model.example, c(100, 92.5, 115), 1:3)
solve(model.example)
get.variables(model.example)
get.objective(model.example)
solve(model.example)
set.column(lprec=model.binary, column=1, x=c(5, 1))
set.column(lprec=model.binary, column=2, x=c(8, 1))
set.column(lprec=model.binary, column=3, x=c(8, 1))
model.binary <- make.lp(nrow=2, ncol=6)
set.column(lprec=model.binary, column=1, x=c(5, 1))
set.column(lprec=model.binary, column=2, x=c(8, 1))
set.column(lprec=model.binary, column=3, x=c(8, 1))
set.column(lprec=model.binary, column=4, x=c(6, 1))
set.column(lprec=model.binary, column=5, x=c(1, 1))
set.column(lprec=model.binary, column=6, x=c(5, 1))
set.constr.value(lprec=model.binary, rhs=c(15, 3), constraints=1:2)
set.constr.type(lprec=model.binary, types=c("<=", ">="), constraints=1:2)
set.type(model.binary, 1, type ="binary")
set.type(model.binary, 2, type ="binary")
set.type(model.binary, 3, type ="binary")
set.type(model.binary, 4, type ="binary")
set.type(model.binary, 5, type ="binary")
set.type(model.binary, 6, type ="binary")
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.total.nodes(model.binary)
get.solutioncount(model.binary)
set.type(model.binary, 1, type ="binary")
set.type(model.binary, 2, type ="binary")
set.type(model.binary, 3, type ="binary")
set.type(model.binary, 4, type ="binary")
set.type(model.binary, 5, type ="binary")
set.type(model.binary, 6, type ="binary")
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
model.binary
solve(model.binary)
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.total.nodes(model.binary)
get.solutioncount(model.binary)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.total.nodes(model.binary)
get.solutioncount(model.binary)
get.total.nodes(model.binary)
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
model.binary <- make.lp(nrow=2, ncol=6)
set.column(lprec=model.binary, column=1, x=c(5, 1))
set.column(lprec=model.binary, column=2, x=c(8, 1))
set.column(lprec=model.binary, column=3, x=c(8, 1))
set.column(lprec=model.binary, column=4, x=c(6, 1))
set.column(lprec=model.binary, column=5, x=c(1, 1))
set.column(lprec=model.binary, column=6, x=c(5, 1))
set.constr.value(lprec=model.binary, rhs=c(15, 3), constraints=1:2)
set.constr.type(lprec=model.binary, types=c("<=", ">="), constraints=1:2)
set.bounds(model.binary, 0, 4, columns = 1)
set.bounds(model.binary, 0, 3, columns = 2)
set.bounds(model.binary, 0, 5, columns = 3)
set.bounds(model.binary, 0, 2, columns = 4)
set.bounds(model.binary, 0, 5, columns = 5)
set.bounds(model.binary, 0, 1, columns = 6)
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.total.nodes(model.binary)
get.solutioncount(model.binary)
model.binary <- make.lp(nrow=2, ncol=6)
set.column(lprec=model.binary, column=1, x=c(5, 1))
set.column(lprec=model.binary, column=2, x=c(8, 1))
set.column(lprec=model.binary, column=3, x=c(8, 1))
set.column(lprec=model.binary, column=6, x=c(5, 1))
set.constr.type(lprec=model.binary, types=c("<=", ">="), constraints=1:2)
set.type(model.binary, 1, type ="binary")
set.type(model.binary, 4, type ="binary")
set.type(model.binary, 5, type ="binary")
set.bounds(model.binary, 0, 4, columns = 1)
set.bounds(model.binary, 0, 3, columns = 2)
set.bounds(model.binary, 0, 5, columns = 3)
set.bounds(model.binary, 0, 2, columns = 4)
set.bounds(model.binary, 0, 5, columns = 5)
set.bounds(model.binary, 0, 1, columns = 6)
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
get.objective(model.binary)
get.variables(model.binary)
get.total.nodes(model.binary)
get.solutioncount(model.binary)
get.variables(model.binary)
max(get.variables(model.binary))
which.max(get.variables(model.binary))
model.binary
#new optimal value
get.objective(model.binary)
which.max(get.variables(model.binary))
model.binary
model.binary <- make.lp(nrow=2, ncol=6)
set.column(lprec=model.binary, column=1, x=c(5, 1))
set.column(lprec=model.binary, column=2, x=c(8, 1))
set.column(lprec=model.binary, column=3, x=c(8, 1))
set.column(lprec=model.binary, column=4, x=c(6, 1))
set.column(lprec=model.binary, column=5, x=c(1, 1))
set.column(lprec=model.binary, column=6, x=c(5, 1))
set.constr.value(lprec=model.binary, rhs=c(15, 3), constraints=1:2)
set.constr.type(lprec=model.binary, types=c("<=", ">="), constraints=1:2)
set.type(model.binary, 1, type ="binary")
set.type(model.binary, 2, type ="binary")
set.type(model.binary, 3, type ="binary")
set.type(model.binary, 4, type ="binary")
set.type(model.binary, 5, type ="binary")
set.type(model.binary, 6, type ="binary")
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
set.constr.value(lprec=model.binary, rhs=c(15, 3), constraints=1:2)
set.constr.type(lprec=model.binary, types=c("<=", ">="), constraints=1:2)
set.type(model.binary, 1, type ="binary")
set.type(model.binary, 2, type ="binary")
set.type(model.binary, 3, type ="binary")
set.type(model.binary, 4, type ="binary")
set.type(model.binary, 5, type ="binary")
set.type(model.binary, 6, type ="binary")
set.bounds(model.binary, 0, 4, columns = 1)
set.bounds(model.binary, 0, 3, columns = 2)
set.bounds(model.binary, 0, 5, columns = 3)
set.bounds(model.binary, 0, 2, columns = 4)
set.bounds(model.binary, 0, 5, columns = 5)
set.bounds(model.binary, 0, 1, columns = 6)
set.objfn(lprec=model.binary, obj=c(-4, -2,-1,-7,-3,-6), indices=1:6)
model.binary
solve(model.binary)
#new optimal value
get.objective(model.binary)
which.max(get.variables(model.binary))
solve(model.binary)
model.binary
get.variables(model.binary)
#new optimal solution
get.variables(model.binary)
#new optimal value
get.objective(model.binary)
solve(model.binary)
#new optimal solution
get.variables(model.binary)
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
get.rhs(model.example)
set.rhs(model.example, c(1001, 1800, 1200, 6000))
get.rhs(model.example)
rm(list=ls())
model.example <- read.lp(file="model_exercise_12.lp", type="lp", verbose="full")
model.example
solve(model.example)
z_opt <- get.objective(model.example)
z_opt
dual <- get.sensitivity.rhs(model.example)
dual
dual$duals
# Shadow price interpretation y1^* related to resource b1 (Nitrate)
get.rhs(model.example)
set.rhs(model.example, c(1001, 1800, 1200, 6000))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
solve(model.example)
# Shadow price interpretation y2^* related to b2 (Sulphur).
set.rhs(model.example, c(1000, 1799, 1200, 6000))
get.rhs(model.example)
solve(model.example)
get.variables(model.example)
z_opt_new <- get.objective(model.example)
z_opt_new
z_opt
dual$duals[2]
z_opt_new == z_opt - dual$duals[2]
